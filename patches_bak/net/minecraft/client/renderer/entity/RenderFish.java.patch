--- a/net/minecraft/client/renderer/entity/RenderFish.java
+++ b/net/minecraft/client/renderer/entity/RenderFish.java
@@ -81,7 +81,7 @@
             double d6;
             double d7;
 
-            if ((this.renderManager.options == null || this.renderManager.options.thirdPersonView <= 0) && entity.angler == Minecraft.getMinecraft().thePlayer)
+              if ((this.renderManager.options == null || this.renderManager.options.thirdPersonView <= 0) && entity.angler == Minecraft.getMinecraft().thePlayer)
             {
                 Vec3d vec3d = new Vec3d((double)k * -0.36D, -0.05D, 0.4D);
                 vec3d = vec3d.rotatePitch(-(entity.angler.prevRotationPitch + (entity.angler.rotationPitch - entity.angler.prevRotationPitch) * partialTicks) * 0.017453292F);
@@ -92,15 +92,30 @@
                 d5 = entity.angler.prevPosY + (entity.angler.posY - entity.angler.prevPosY) * (double)partialTicks + vec3d.yCoord;
                 d6 = entity.angler.prevPosZ + (entity.angler.posZ - entity.angler.prevPosZ) * (double)partialTicks + vec3d.zCoord;
                 d7 = (double)entity.angler.getEyeHeight();
+                
+                // VIVE START - use controller for fishing rod start point
+
+                    Vec3d aimSource = Minecraft.getMinecraft().roomScale.getControllerPos_World(0);
+                    Vec3d aimRotation = Minecraft.getMinecraft().roomScale.getControllerDir_World(0);
+                    d4= aimSource.xCoord + aimRotation.xCoord * 0.4f;
+                    d5= aimSource.yCoord + aimRotation.yCoord * 0.4f;
+                    d6 = aimSource.zCoord + aimRotation.zCoord * 0.4f;
+                    d7=0;
+                // VIVE END - use controller for fishing rod start point
+                
             }
             else
             {
                 d4 = entity.angler.prevPosX + (entity.angler.posX - entity.angler.prevPosX) * (double)partialTicks - d1 * d2 - d0 * 0.8D;
-                d5 = entity.angler.prevPosY + (double)entity.angler.getEyeHeight() + (entity.angler.posY - entity.angler.prevPosY) * (double)partialTicks - 0.45D;
+                d5 = entity.angler.prevPosY  + (entity.angler.posY - entity.angler.prevPosY) * (double)partialTicks - 0.45D;
                 d6 = entity.angler.prevPosZ + (entity.angler.posZ - entity.angler.prevPosZ) * (double)partialTicks - d0 * d2 + d1 * 0.8D;
                 d7 = entity.angler.isSneaking() ? -0.1875D : 0.0D;
+                
             }
+       
 
+            
+            
             double d13 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
             double d8 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + 0.25D;
             double d9 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
