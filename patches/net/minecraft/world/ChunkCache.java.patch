--- a/net/minecraft/world/ChunkCache.java
+++ b/net/minecraft/world/ChunkCache.java
@@ -1,9 +1,11 @@
 package net.minecraft.world;
 
 import javax.annotation.Nullable;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.init.Blocks;
+import net.minecraft.src.Reflector;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.BlockPos;
@@ -65,7 +67,7 @@
     @Nullable
     public TileEntity getTileEntity(BlockPos pos)
     {
-        return this.getTileEntity(pos, Chunk.EnumCreateEntityType.IMMEDIATE);
+        return this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK); // Forge: don't modify world from other threads
     }
 
     @Nullable
@@ -73,6 +75,7 @@
     {
         int i = (p_190300_1_.getX() >> 4) - this.chunkX;
         int j = (p_190300_1_.getZ() >> 4) - this.chunkZ;
+        if (!withinBounds(i, j)) return null;
         return this.chunkArray[i][j].getTileEntity(p_190300_1_, p_190300_2_);
     }
 
@@ -114,6 +117,7 @@
     {
         int i = (pos.getX() >> 4) - this.chunkX;
         int j = (pos.getZ() >> 4) - this.chunkZ;
+        if (!withinBounds(i, j)) return net.minecraft.init.Biomes.PLAINS;
         return this.chunkArray[i][j].getBiome(pos, this.world.getBiomeProvider());
     }
 
@@ -150,6 +154,7 @@
             {
                 int i = (pos.getX() >> 4) - this.chunkX;
                 int j = (pos.getZ() >> 4) - this.chunkZ;
+                if (!withinBounds(i, j)) return type.defaultLightValue;
                 return this.chunkArray[i][j].getLightFor(type, pos);
             }
         }
@@ -165,7 +170,8 @@
      */
     public boolean isAirBlock(BlockPos pos)
     {
-        return this.getBlockState(pos).getMaterial() == Material.AIR;
+    	IBlockState state = this.getBlockState(pos);
+        return Reflector.forgeExists() ? Reflector.callBoolean(state.getBlock(), Reflector.ForgeBlock_isAir, state, this, pos) : state.getMaterial() == Material.AIR;
     }
 
     public int getLightFor(EnumSkyBlock p_175628_1_, BlockPos pos)
@@ -174,6 +180,7 @@
         {
             int i = (pos.getX() >> 4) - this.chunkX;
             int j = (pos.getZ() >> 4) - this.chunkZ;
+            if (!withinBounds(i, j)) return p_175628_1_.defaultLightValue;
             return this.chunkArray[i][j].getLightFor(p_175628_1_, pos);
         }
         else
@@ -191,4 +198,22 @@
     {
         return this.world.getWorldType();
     }
+
+    // This is a Forge method, so we don't care about what it does in vanilla
+    //@Override
+    public boolean isSideSolid(BlockPos pos, EnumFacing side, boolean _default)
+    {
+        int x = (pos.getX() >> 4) - this.chunkX;
+        int z = (pos.getZ() >> 4) - this.chunkZ;
+        if (pos.getY() < 0 || pos.getY() >= 256) return _default;
+        if (!withinBounds(x, z)) return _default;
+
+        IBlockState state = getBlockState(pos);
+        return Reflector.callBoolean(state.getBlock(), Reflector.ForgeBlock_isSideSolid, state, this, pos, side);
+    }
+
+    private boolean withinBounds(int x, int z)
+    {
+        return x >= 0 && x < chunkArray.length && z >= 0 && z < chunkArray[x].length && chunkArray[x][z] != null;
+    }
 }
