--- a/net/minecraft/client/gui/GuiIngame.java
+++ b/net/minecraft/client/gui/GuiIngame.java
@@ -9,9 +9,13 @@
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
+
+import org.lwjgl.opengl.GL11;
+
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.audio.ElytraSound;
 import net.minecraft.client.gui.inventory.GuiContainer;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -19,6 +23,8 @@
 import net.minecraft.client.renderer.RenderItem;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.VertexBuffer;
+import net.minecraft.client.renderer.GlStateManager.DestFactor;
+import net.minecraft.client.renderer.GlStateManager.SourceFactor;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
@@ -60,6 +66,8 @@
     private static final ResourceLocation VIGNETTE_TEX_PATH = new ResourceLocation("textures/misc/vignette.png");
     private static final ResourceLocation WIDGETS_TEX_PATH = new ResourceLocation("textures/gui/widgets.png");
     private static final ResourceLocation PUMPKIN_BLUR_TEX_PATH = new ResourceLocation("textures/misc/pumpkinblur.png");
+    public static final ResourceLocation INVENTORY_BACKGROUND = new ResourceLocation("textures/gui/container/inventory.png");
+
     private final Random rand = new Random();
     private final Minecraft mc;
     private final RenderItem itemRenderer;
@@ -149,6 +157,7 @@
         this.mc.entityRenderer.setupOverlayRendering();
         GlStateManager.enableBlend();
 
+        
         if (Config.isVignetteEnabled())
         {
             this.renderVignette(this.mc.player.getBrightness(partialTicks), scaledresolution);
@@ -160,21 +169,13 @@
         }
 
         ItemStack itemstack = this.mc.player.inventory.armorItemInSlot(3);
-
-        if (this.mc.gameSettings.thirdPersonView == 0 && itemstack != null && itemstack.getItem() == Item.getItemFromBlock(Blocks.PUMPKIN))
+        mc.pumpkineffect = 0;
+        if (this.mc.gameSettings.thirdPersonView == 0 && itemstack !=null && itemstack.getItem() == Item.getItemFromBlock(Blocks.PUMPKIN))
         {
-            this.renderPumpkinOverlay(scaledresolution);
+        	mc.pumpkineffect = 1f;
+           // this.renderPumpkinOverlay(scaledresolution);
         }
 
-        if (!this.mc.player.isPotionActive(MobEffects.NAUSEA))
-        {
-            float f = this.mc.player.prevTimeInPortal + (this.mc.player.timeInPortal - this.mc.player.prevTimeInPortal) * partialTicks;
-
-            if (f > 0.0F)
-            {
-                this.renderPortal(f, scaledresolution);
-            }
-        }
 
         if (this.mc.playerController.isSpectator())
         {
@@ -184,20 +185,55 @@
         {
             this.renderHotbar(scaledresolution, partialTicks);
         }
-
+        
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         this.mc.getTextureManager().bindTexture(ICONS);
         GlStateManager.enableBlend();
-        this.renderAttackIndicator(partialTicks, scaledresolution);
-        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+        
+       
+        //VIVE NOPE
+        //this.renderAttackIndicator(partialTicks, scaledresolution);
+        //NOPE
+        
+        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+        
         this.mc.mcProfiler.startSection("bossHealth");
-        this.overlayBoss.renderBossHealth();
+        	this.overlayBoss.renderBossHealth();
         this.mc.mcProfiler.endSection();
+        
+        //VIVE SPRINTDICATOR
+        if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
+        {
+        	EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();
+        	int iconp = 0;
+        	if(entityplayer.isSprinting()) iconp = 10;
+        	if(entityplayer.isSneaking()) iconp = 13;
+        	if(entityplayer.isElytraFlying()) iconp = -1;
+        	if(iconp!=0){
+        		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+
+        		if(iconp ==-1){
+            		int w = scaledresolution.getScaledWidth() / 2 - 109;
+            		int h = scaledresolution.getScaledHeight() -39;
+                    TextureAtlasSprite textureatlassprite = this.mc.getTextureMapBlocks().getAtlasSprite("minecraft:items/elytra");
+                    this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
+                    this.drawTexturedModalRect(w, h, textureatlassprite, 16, 16);
+        		}else{
+        			this.mc.getTextureManager().bindTexture(INVENTORY_BACKGROUND);
+            		int w = scaledresolution.getScaledWidth() / 2 - 109;
+            		int h = scaledresolution.getScaledHeight() -39;
+            		this.drawTexturedModalRect(w, h, 0 + iconp % 8 * 18, 198 + iconp / 8 * 18, 18, 18);        			
+        		}
+        	}
+        }
+        //
+        
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         this.mc.getTextureManager().bindTexture(ICONS);
 
+        
         if (this.mc.playerController.shouldDrawHUD())
-        {
+        {      	
             this.renderPlayerStats(scaledresolution);
         }
 
@@ -379,7 +415,7 @@
         GlStateManager.enableAlpha();
     }
 
-    private void renderAttackIndicator(float p_184045_1_, ScaledResolution p_184045_2_)
+    protected void renderAttackIndicator(float p_184045_1_, ScaledResolution p_184045_2_)
     {
         GameSettings gamesettings = this.mc.gameSettings;
 
@@ -552,6 +588,7 @@
             int j = 182;
             int k = 91;
             this.zLevel = -90.0F;
+            GlStateManager.enableAlpha();
             this.drawTexturedModalRect(i - 91, sr.getScaledHeight() - 22, 0, 0, 182, 22);
             this.drawTexturedModalRect(i - 91 - 1 + entityplayer.inventory.currentItem * 20, sr.getScaledHeight() - 22 - 1, 0, 22, 24, 22);
 
@@ -570,7 +607,7 @@
             this.zLevel = f;
             GlStateManager.enableRescaleNormal();
             GlStateManager.enableBlend();
-            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+            GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);          
             RenderHelper.enableGUIStandardItemLighting();
 
             for (int l = 0; l < 9; ++l)
@@ -744,7 +781,7 @@
         this.mc.mcProfiler.endSection();
     }
 
-    private void renderScoreboard(ScoreObjective objective, ScaledResolution scaledRes)
+    protected void renderScoreboard(ScoreObjective objective, ScaledResolution scaledRes)
     {
         Scoreboard scoreboard = objective.getScoreboard();
         Collection<Score> collection = scoreboard.getSortedScores(objective);
@@ -961,7 +998,7 @@
                     }
                 }
             }
-
+           
             Entity entity = entityplayer.getRidingEntity();
 
             if (entity == null)
@@ -1025,7 +1062,7 @@
         }
     }
 
-    private void renderMountHealth(ScaledResolution p_184047_1_)
+    protected void renderMountHealth(ScaledResolution p_184047_1_)
     {
         if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
         {
@@ -1079,7 +1116,7 @@
         }
     }
 
-    private void renderPumpkinOverlay(ScaledResolution scaledRes)
+    protected void renderPumpkinOverlay(ScaledResolution scaledRes)
     {
         GlStateManager.disableDepth();
         GlStateManager.depthMask(false);
@@ -1104,8 +1141,13 @@
     /**
      * Renders a Vignette arount the entire screen that changes with light level.
      */
-    private void renderVignette(float lightLevel, ScaledResolution scaledRes)
+    protected void renderVignette(float lightLevel, ScaledResolution scaledRes)
     {
+        /** MINECRIFT **/
+        if (this.mc.stereoProvider.isStereo())
+            return;
+        /** END MINECRIFT **/
+    	
         if (Config.isVignetteEnabled())
         {
             lightLevel = 1.0F - lightLevel;
@@ -1156,36 +1198,7 @@
 
     private void renderPortal(float timeInPortal, ScaledResolution scaledRes)
     {
-        if (timeInPortal < 1.0F)
-        {
-            timeInPortal = timeInPortal * timeInPortal;
-            timeInPortal = timeInPortal * timeInPortal;
-            timeInPortal = timeInPortal * 0.8F + 0.2F;
-        }
-
-        GlStateManager.disableAlpha();
-        GlStateManager.disableDepth();
-        GlStateManager.depthMask(false);
-        GlStateManager.tryBlendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
-        GlStateManager.color(1.0F, 1.0F, 1.0F, timeInPortal);
-        this.mc.getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
-        TextureAtlasSprite textureatlassprite = this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(Blocks.PORTAL.getDefaultState());
-        float f = textureatlassprite.getMinU();
-        float f1 = textureatlassprite.getMinV();
-        float f2 = textureatlassprite.getMaxU();
-        float f3 = textureatlassprite.getMaxV();
-        Tessellator tessellator = Tessellator.getInstance();
-        VertexBuffer vertexbuffer = tessellator.getBuffer();
-        vertexbuffer.begin(7, DefaultVertexFormats.POSITION_TEX);
-        vertexbuffer.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f, (double)f3).endVertex();
-        vertexbuffer.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f2, (double)f3).endVertex();
-        vertexbuffer.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex((double)f2, (double)f1).endVertex();
-        vertexbuffer.pos(0.0D, 0.0D, -90.0D).tex((double)f, (double)f1).endVertex();
-        tessellator.draw();
-        GlStateManager.depthMask(true);
-        GlStateManager.enableDepth();
-        GlStateManager.enableAlpha();
-        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+    	// Forge needs this for inheritance reasons
     }
 
     private void renderHotbarItem(int p_184044_1_, int p_184044_2_, float p_184044_3_, EntityPlayer player, @Nullable ItemStack stack)
@@ -1363,4 +1376,42 @@
     {
         return this.overlayBoss;
     }
+
+    
+    //VIVECRAFT ADDITIONS ***********************************
+    
+	public void drawMouseMenuQuad(int mouseX, int mouseY)
+	{	
+		GlStateManager.enableBlend();
+		GlStateManager.blendFunc(SourceFactor.ONE_MINUS_DST_COLOR, DestFactor.ONE_MINUS_SRC_COLOR);
+		GlStateManager.disableDepth();
+		GlStateManager.disableLighting();
+		GlStateManager.colorMask(true, true, true, false);
+
+		this.mc.getTextureManager().bindTexture(Gui.ICONS);
+		float menuMousePointerSize = 16f * this.mc.vrSettings.menuCrosshairScale;
+		this.mc.ingameGUI.drawCentredTexturedModalRect(mouseX, mouseY, menuMousePointerSize, menuMousePointerSize, 0, 0, 15, 15);
+		
+		GlStateManager.disableBlend();
+		GlStateManager.blendFunc(SourceFactor.SRC_ALPHA, DestFactor.ONE_MINUS_SRC_ALPHA);
+		GlStateManager.enableDepth();
+		GlStateManager.enableLighting();
+		GlStateManager.colorMask(true, true, true, false);
+	}
+    /**
+     * Draws a centred textured rectangle at the stored z-value. Args: x, y, width, height, u, v, texwidth, texheight
+     */
+    public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+    {   	
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        Tessellator tessellator = Tessellator.getInstance();
+        tessellator.getBuffer().begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_TEX);
+        tessellator.getBuffer().pos(0, 0, 0).tex(u, v);
+        tessellator.getBuffer().pos((double)(centreX - (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel).tex((double)((float)(u + 0) * f), (double)((float)(v + texHeight) * f1)).endVertex();
+        tessellator.getBuffer().pos((double)(centreX + (width / 2f)), (double)(centreY + (height / 2f)), (double)this.zLevel).tex( (double)((float)(u + texWidth) * f), (double)((float)(v + texHeight) * f1)).endVertex();
+        tessellator.getBuffer().pos((double)(centreX + (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel).tex( (double)((float)(u + texWidth) * f), (double)((float)(v + 0) * f1)).endVertex();
+        tessellator.getBuffer().pos((double)(centreX - (width / 2f)), (double)(centreY - (height / 2f)), (double)this.zLevel).tex( (double)((float)(u + 0) * f), (double)((float)(v + 0) * f1)).endVertex();
+        tessellator.draw();
+    }
 }
