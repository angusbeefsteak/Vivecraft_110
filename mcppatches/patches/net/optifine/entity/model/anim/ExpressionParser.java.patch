--- a/net/optifine/entity/model/anim/ExpressionParser.java
+++ b/net/optifine/entity/model/anim/ExpressionParser.java
@@ -211,9 +211,9 @@
         }
     }
 
-    private EnumFunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException
+    private EnumFunctionType getFunctionType(Token tokenin, Deque<Token> dequein) throws ParseException
     {
-        Token token = (Token)deque.peek();
+        Token token = (Token)dequein.peek();
 
         if (token != null && token.getType() == EnumTokenType.BRACKET_OPEN)
         {
@@ -240,7 +240,7 @@
         }
     }
 
-    private IExpression makeFunction(EnumFunctionType type, Deque<Token> deque) throws ParseException
+    private IExpression makeFunction(EnumFunctionType type, Deque<Token> dequein) throws ParseException
     {
         if (type.getCountArguments() == 0)
         {
@@ -248,20 +248,20 @@
         }
         else
         {
-            Token token = (Token)deque.poll();
-            Deque<Token> deque = getGroup(deque, EnumTokenType.BRACKET_CLOSE, true);
+            Token token = (Token)dequein.poll();
+            Deque<Token> deque = getGroup(dequein, EnumTokenType.BRACKET_CLOSE, true);
             IExpression[] aiexpression = this.parseExpressions(deque);
             return makeFunction(type, aiexpression);
         }
     }
 
-    private IExpression[] parseExpressions(Deque<Token> deque) throws ParseException
+    private IExpression[] parseExpressions(Deque<Token> dequein) throws ParseException
     {
         List<IExpression> list = new ArrayList();
 
         while (true)
         {
-            Deque<Token> deque = getGroup(deque, EnumTokenType.COMMA, false);
+            Deque<Token> deque = getGroup(dequein, EnumTokenType.COMMA, false);
             IExpression iexpression = this.parseInfix(deque);
 
             if (iexpression == null)
@@ -307,17 +307,17 @@
         }
     }
 
-    private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException
+    private IExpression makeBracketed(Token token, Deque<Token> dequein) throws ParseException
     {
-        Deque<Token> deque = getGroup(deque, EnumTokenType.BRACKET_CLOSE, true);
+        Deque<Token> deque = getGroup(dequein, EnumTokenType.BRACKET_CLOSE, true);
         return this.parseInfix(deque);
     }
 
-    private static Deque<Token> getGroup(Deque<Token> deque, EnumTokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
+    private static Deque<Token> getGroup(Deque<Token> dequein, EnumTokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
     {
         Deque<Token> deque = new ArrayDeque();
         int i = 0;
-        Iterator iterator = deque.iterator();
+        Iterator iterator = dequein.iterator();
 
         while (iterator.hasNext())
         {
